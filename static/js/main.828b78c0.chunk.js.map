{"version":3,"sources":["components/SearchBlock/SearchBlock.js","settings.js","components/Point/Point.js","components/PointList/PointList.js","utils.js","components/YandexMap/YandexMap.js","components/App/App.js","index.js"],"names":["SearchBlock","searchValueHandler","inputRef","useRef","className","ref","placeholder","onClick","current","searchValue","value","trim","MAP_APP_KEY","DEFAULT_START_CENTER","lat","lon","PENDING_ADD","POINT_STATUS_TITLE","Point","point","clickHandler","removeHandler","name","mapStatus","event","stopPropagation","PointList","points","pointClickHandler","pointRemoveHandler","map","id","a","Promise","resolve","reject","window","ymaps","src","mapScript","document","createElement","async","onload","ready","onerror","err","body","appendChild","createRandomString","size","letters","result","index","push","Math","floor","random","length","join","createRandomColor","COLORS","YandexMap","useState","loading","setLoading","error","setError","startCenter","setStartCenter","setPoints","mapContainer","ymapsRef","myMapRef","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","loadMap","finally","then","Map","center","zoom","controls","autoFitToViewport","catch","console","replacePoint","oldPoints","oldPoint","forEach","geocode","res","geoObjects","get","geometry","_coordinates","mark","Placemark","preset","iconColor","events","add","rewindMapToCoords","log","panTo","getCoordinates","setZoom","duration","some","toLowerCase","remove","filter","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.828b78c0.chunk.js","sourcesContent":["import React, {useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchBlock.scss';\n\nfunction SearchBlock({searchValueHandler}) {\n    const inputRef = useRef();\n\n    const searchButtonClickHandler = () => {\n        if (!inputRef.current) return;\n        const searchValue = inputRef.current.value.trim();\n        if (!searchValue) return;\n\n        // Если значение было обработано и успешно добавлено вышестоящим компонентом - очищаем строку поиска\n        const hasAddSearchValue = searchValueHandler(searchValue);\n        if (hasAddSearchValue) inputRef.current.value = '';\n    }\n\n    return (\n        <div className=\"search_block\">\n            <input ref={inputRef} placeholder=\"Введите название населенного пункта\"/>\n            <button onClick={searchButtonClickHandler}>Найти координаты</button>\n        </div>\n    );\n}\n\nSearchBlock.propTypes = {\n    searchValueHandler: PropTypes.func\n}\n\nexport default SearchBlock;","export const MAP_APP_KEY = 'd84a4169-1739-4ba8-a628-d3ca43063114&lang';\n\nexport const DEFAULT_ZOOM = 10;\nexport const DEFAULT_START_CENTER = {lat: 45.02, lon: 38.59};\n\nexport const PENDING_ADD = 'pa';    // Объект ожидает добавления на карту\nexport const ADDED_TO_MAP = 'atm';  // Объект добавлен на карту\nexport const ADDED_ERROR = 'ae';    // При добавлении объекта на карту возникла ошибка\n\nexport const POINT_STATUS_TITLE = {\n    [PENDING_ADD]: 'Поиск координат...',\n    [ADDED_TO_MAP]: 'Добавлен на карту',\n    [ADDED_ERROR]: 'Не удалось добавить на карту'\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {POINT_STATUS_TITLE} from '../../settings';\nimport './Point.scss';\n\nfunction Point({point, clickHandler, removeHandler}) {\n\n    const removeButtonClickHandler = event => {\n        event.stopPropagation();\n        removeHandler(point);\n    }\n\n    return (\n        <li className=\"point\" onClick={() => clickHandler(point)}>\n            <span>{point.name}</span>\n            <span className=\"point__status\">{POINT_STATUS_TITLE[point.mapStatus]}</span>\n            <button className=\"point__remove_button\" onClick={removeButtonClickHandler}>Удалить</button>\n        </li>\n    );\n}\n\nPoint.propTypes = {\n    point: PropTypes.object,\n    clickHandler: PropTypes.func,\n    removeHandler: PropTypes.func\n}\n\nexport default Point;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Point from '../Point/Point';\nimport './PointList.scss';\n\nfunction PointList({points, pointClickHandler, pointRemoveHandler}) {\n    return (\n        <ul className=\"point_list\">\n            {points.map(\n                point =>\n                    <Point\n                        key={point.id}\n                        point={point}\n                        clickHandler={pointClickHandler}\n                        removeHandler={pointRemoveHandler}\n                    />\n            )}\n        </ul>\n    );\n}\n\nPointList.propTypes = {\n    points: PropTypes.array,\n    pointClickHandler: PropTypes.func,\n    pointRemoveHandler: PropTypes.func\n}\n\nexport default PointList;","import {MAP_APP_KEY} from './settings';\n\nexport async function loadMap() {\n    return new Promise((resolve, reject) => {\n        if (window.ymaps) {\n            resolve(window.ymaps);\n        } else {\n            const src = `https://api-maps.yandex.ru/2.1/?apikey=${MAP_APP_KEY}&lang=ru_RU`;\n            const mapScript = document.createElement('script');\n            mapScript.src = src;\n            mapScript.async = true;\n            mapScript.onload = () => window.ymaps.ready(() => resolve(window.ymaps));\n            mapScript.onerror = err => reject(err);\n            document.body.appendChild(mapScript);\n        }\n    });\n}\n\nexport function createRandomString(size = 8) {\n    const letters = 'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm';\n    const result = [];\n    for (let index = 0; index < size; index++) result.push(letters[Math.floor(Math.random() * letters.length)]);\n    return result.join('');\n}\n\nexport function createRandomColor(){\n    const COLORS = ['OrangeRed', 'LimeGreen', 'DodgerBlue', 'BlueViolet', 'DimGrey'];\n    return COLORS[Math.floor(Math.random() * COLORS.length)];\n}\n","import React, {useState, useEffect, useRef} from 'react';\nimport SearchBlock from '../SearchBlock/SearchBlock';\nimport PointList from '../PointList/PointList';\nimport {loadMap, createRandomString, createRandomColor} from '../../utils';\nimport {PENDING_ADD, ADDED_TO_MAP, ADDED_ERROR, DEFAULT_ZOOM, DEFAULT_START_CENTER} from '../../settings';\nimport './YandexMap.scss';\n\nfunction YandexMap() {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const [startCenter, setStartCenter] = useState(null);\n    const [points, setPoints] = useState([]);\n\n    const mapContainer = useRef(null);\n    const ymapsRef = useRef(null);\n    const myMapRef = useRef(null);\n\n    // Подготавливаем стартовые координаты для центра карты\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(\n            position => setStartCenter({lat: position.coords.latitude, lon: position.coords.longitude}),\n            () => setStartCenter(DEFAULT_START_CENTER)\n        );\n    }, []);\n\n    // Загружаем карту\n    useEffect(() => {\n        if (!startCenter) return;\n        loadMap()\n            .finally(() => setLoading(false))\n            .then(ymaps => {\n                ymapsRef.current = ymaps;\n                myMapRef.current = new ymaps.Map(\n                    mapContainer.current,\n                    {\n                        // Координаты центра карты: «широта, долгота».\n                        center: [startCenter.lat, startCenter.lon],\n                        // Уровень масштабирования. Допустимые значения: от 0 (весь мир) до 19.\n                        zoom: DEFAULT_ZOOM,\n                        controls: ['smallMapDefaultSet']\n                    },\n                    {\n                        autoFitToViewport: 'always'\n                    }\n                );\n            })\n            .catch(err => {\n                setError(true);\n                console.error(`Ошибка загрузки карты: ${err}`);\n            });\n    }, [startCenter]);\n\n    // Обрабатываем изменение списка точек\n    useEffect(() => {\n        if (points.length === 0 || !ymapsRef.current || !myMapRef.current) return;\n\n        const replacePoint = point => setPoints(\n            oldPoints => oldPoints.map(oldPoint => oldPoint.id === point.id ? point : oldPoint)\n        );\n\n        points.forEach(point => {\n            if (point.mapStatus !== PENDING_ADD) return;\n\n            const geocoder = ymapsRef.current.geocode(point.name);\n            geocoder\n                .then(res => {\n                    const coords = res.geoObjects.get(0).geometry._coordinates;\n                    const mark = new ymapsRef.current.Placemark(\n                        coords,\n                        {},\n                        {\n                            preset: 'islands#icon',\n                            iconColor: createRandomColor()\n                        }\n                    );\n                    mark.events.add('click', () => rewindMapToCoords(mark));\n                    myMapRef.current.geoObjects.add(mark);\n                    rewindMapToCoords(mark);\n\n                    replacePoint({...point, mark, mapStatus: ADDED_TO_MAP});\n                })\n                .catch(err => {\n                    console.log(`Не удалось определить координаты для ${point.name} Ошибка: ${err}`);\n                    replacePoint({...point, mapStatus: ADDED_ERROR})\n                });\n        });\n    }, [points.length]);\n\n    const searchHandler = searchValue => {\n        if (points.some(point => point.name.toLowerCase() === searchValue.toLowerCase())) return false;\n        setPoints(oldPoints => [{\n            id: createRandomString(),\n            name: searchValue,\n            mark: null,\n            mapStatus: PENDING_ADD\n        }, ...oldPoints]);\n        return true;\n    }\n\n    // Функция, осуществляющая \"перемотку\" карты до нужных координат\n    const rewindMapToCoords = mark => {\n        if (!myMapRef.current || !mark) return;\n        myMapRef.current.panTo(mark.geometry.getCoordinates()).then(() => myMapRef.current.setZoom(DEFAULT_ZOOM, {duration: 200}));\n    }\n\n    // Обработчик клика на элементе списка точек\n    const pointClickHandler = point => rewindMapToCoords(point.mark);\n\n    // Обработчик удаления точки (из списка точек и, по возможности, с карты)\n    const pointRemoveHandler = point => {\n        if (point.mark && myMapRef.current) myMapRef.current.geoObjects.remove(point.mark);\n        setPoints(oldPoints => oldPoints.filter(oldPoint => oldPoint.id !== point.id));\n    }\n\n    // В случае ошибки загрузки карты возвращаем заглушку\n    if (error) return (\n        <div className=\"yandex_map\">\n            <span>Не удалось загрузить карту...</span>\n        </div>\n    );\n\n    return (\n        <div className=\"yandex_map\">\n            {loading ?\n                <span>Загружаю карту...</span>\n                :\n                <>\n                    <SearchBlock searchValueHandler={searchHandler}/>\n                    {points.length > 0 &&\n                    <PointList\n                        points={points}\n                        pointClickHandler={pointClickHandler}\n                        pointRemoveHandler={pointRemoveHandler}\n                    />\n                    }\n                    <div className=\"yandex_map__map_container\" ref={mapContainer}/>\n                </>\n            }\n        </div>\n    );\n}\n\nexport default YandexMap;","import React from 'react';\nimport YandexMap from '../YandexMap/YandexMap';\nimport './App.scss';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <header>Компонент карты:</header>\n            <YandexMap/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './styles/index.css';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}